---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.configMapName }}
  namespace: {{ .Release.Namespace }}
  labels:
    name: etcd
    instance: {{ .Values.name }}
{{- if .Values.labels }}
{{ toYaml .Values.labels | indent 4 }}
{{- end }}
  ownerReferences:
  - apiVersion: druid.gardener.cloud/v1alpha1
    blockOwnerDeletion: true
    controller: true
    kind: Etcd
    name: {{ .Values.name }}
    uid: {{ .Values.uid }}
data:
  bootstrap.sh: |-
    #!/bin/sh
    VALIDATION_MARKER=/var/etcd/data/validation_marker

{{- if .Values.etcd.enableTLS }}
    # Add self-signed CA to list of root CA-certificates
    cat /var/etcd/ssl/ca/ca.crt >> /etc/ssl/certs/ca-certificates.crt
    if [ $? -ne 0 ]
    then
      echo "failed to update root certificate list"
      exit 1
    fi
{{- end }}

    trap_and_propagate() {
        PID=$1
        shift
        for sig in "$@" ; do
            trap "kill -$sig $PID" "$sig"
        done
    }

    start_managed_etcd(){
          rm -rf $VALIDATION_MARKER
          etcd --config-file /var/etcd/config/etcd.conf.yaml &
          ETCDPID=$!
          trap_and_propagate $ETCDPID INT TERM
          wait $ETCDPID
          RET=$?
          echo $RET > $VALIDATION_MARKER
          exit $RET
    }

    check_and_start_etcd(){
          while true;
          do
            wget "http{{ if .Values.etcd.enableTLS }}s{{ end }}://{{ .Values.name }}-local:{{ .Values.backup.port }}/initialization/status" -S -O status;
            STATUS=$(cat status);
            case $STATUS in
            "New")
                  wget "http{{ if .Values.etcd.enableTLS }}s{{ end }}://{{ .Values.name }}-local:{{ .Values.backup.port }}/initialization/start?mode=$1{{- if .Values.backup.failBelowRevision }}&failbelowrevision={{ int $.Values.backup.failBelowRevision }}{{- end }}" -S -O - ;;
            "Progress")
                  sleep 1;
                  continue;;
            "Failed")
                  continue;;
            "Successful")
                  echo "Bootstrap preprocessing end time: $(date)"
                  start_managed_etcd
                  break
                  ;;
            esac;
          done
    }

    echo "Bootstrap preprocessing start time: $(date)"
    if [ ! -f $VALIDATION_MARKER ] ;
    then
          echo "No $VALIDATION_MARKER file. Perform complete initialization routine and start etcd."
          check_and_start_etcd full
    else
          echo "$VALIDATION_MARKER file present. Check return status and decide on initialization"
          run_status=$(cat $VALIDATION_MARKER)
          echo "$VALIDATION_MARKER content: $run_status"
          if [ $run_status == '143' ] || [ $run_status == '130' ] || [ $run_status == '0' ] ; then
                echo "Requesting sidecar to perform sanity validation"
                check_and_start_etcd sanity
          else
                echo "Requesting sidecar to perform full validation"
                check_and_start_etcd full
          fi
    fi
  etcd.conf.yaml: |-
    # Human-readable name for this member.
    name: etcd-{{ printf "%.6s" .Values.uid }}

    # Path to the data directory.
    data-dir: /var/etcd/data/new.etcd

    # metrics configuration
    metrics: {{ .Values.etcd.metrics }}

    # Number of committed transactions to trigger a snapshot to disk.
    snapshot-count: 75000

    # Accept etcd V2 client requests
    enable-v2: false

    # Raise alarms when backend size exceeds the given quota. 0 means use the
    # default quota.
    {{- if .Values.backup.etcdQuotaBytes }}
    quota-backend-bytes: {{ int $.Values.backup.etcdQuotaBytes }}
    {{- end }}

    # List of comma separated URLs to listen on for client traffic.
    listen-client-urls: {{ if .Values.etcd.enableTLS }}https{{ else }}http{{ end }}://0.0.0.0:{{ .Values.etcd.clientPort }}

    # List of this member's client URLs to advertise to the public.
    # The URLs needed to be a comma-separated list.
    advertise-client-urls: {{ if .Values.etcd.enableTLS }}https{{ else }}http{{ end }}://0.0.0.0:{{ .Values.etcd.clientPort }}

    # Initial cluster token for the etcd cluster during bootstrap.
    initial-cluster-token: {{ .Values.etcd.initialClusterToken }}

    # Initial cluster state ('new' or 'existing').
    initial-cluster-state: {{ .Values.etcd.initialClusterState }}

    # keep one day of history
    auto-compaction-mode: periodic
    auto-compaction-retention: "24"

{{- if .Values.etcd.enableTLS }}
    client-transport-security:
      # Path to the client server TLS cert file.
      cert-file: /var/etcd/ssl/server/tls.crt

      # Path to the client server TLS key file.
      key-file: /var/etcd/ssl/server/tls.key

      # Enable client cert authentication.
      client-cert-auth: true

      # Path to the client server TLS trusted CA cert file.
      trusted-ca-file: /var/etcd/ssl/ca/ca.crt

      # Client TLS using generated certificates
      auto-tls: false
{{- end }}